name: Build and Release Electron App

# 触发条件：推送到 main 分支或手动触发
on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:

# 环境变量
env:
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      # 检出代码
      - name: Check out Git repository
        uses: actions/checkout@v4
      
      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      # 设置 Python 环境 (macOS 需要)
       - name: Setup Python
         if: matrix.os == 'macos-latest'
         uses: actions/setup-python@v4
         with:
           python-version: '3.x'
      
      # 安装 Linux 构建依赖
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2-dev
          sudo snap install snapcraft --classic
      
      # 缓存 Electron 和 electron-builder
      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.cache
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-
      
      # 安装依赖
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      # 构建前端应用
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      
      # 构建 Electron 应用 (Linux)
      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd frontend
          npm run build:electron
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 构建 Electron 应用 (macOS)
      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd frontend
          npm run build:electron
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # macOS 代码签名（可选）
          # CSC_LINK: ${{ secrets.MAC_CERTS }}
          # CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      
      # 构建 Electron 应用 (Windows)
      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd frontend
          npm run build:electron
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Windows 代码签名（可选）
          # CSC_LINK: ${{ secrets.WIN_CERTS }}
          # CSC_KEY_PASSWORD: ${{ secrets.WIN_CERTS_PASSWORD }}
      
      # 上传构建产物
      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            frontend/dist-packages/*.AppImage
            frontend/dist-packages/*.snap
            frontend/dist-packages/*.deb
            frontend/dist-packages/*.rpm
      
      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-packages
          path: |
            frontend/dist-packages/*.dmg
            frontend/dist-packages/*.zip
      
      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-packages
          path: |
            frontend/dist-packages/*.exe
            frontend/dist-packages/*.msi
            frontend/dist-packages/*.nsis.7z
  
  # 发布到 GitHub Releases（仅在推送标签时）
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            linux-packages/*
            macos-packages/*
            windows-packages/*
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}